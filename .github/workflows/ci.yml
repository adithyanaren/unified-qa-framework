name: CI - QA Framework

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run PyTest
        run: |
          mkdir -p reports/pytest
          PYTHONPATH=. pytest src/tests/pytest --maxfail=1 --disable-warnings -q --junitxml=reports/pytest/results.xml

      - name: Run Robot Framework tests
        run: |
          mkdir -p reports/robot
          robot --output reports/robot/output.xml \
                --report reports/robot/report.html \
                --log reports/robot/log.html \
                src/tests/Robot/api_tests.robot

      - name: Run Locust load tests
        run: |
          mkdir -p reports/locust
          locust -f src/tests/locust/locustfile.py \
              --headless \
              -u 10 -r 2 -t 1m \
              --host https://prl0fjqceh.execute-api.us-east-1.amazonaws.com/dev \
              --csv reports/locust/results || true

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda to dev alias
        run: |
          zip -r lambda_function.zip lambda_function.py
          aws lambda update-function-code \
            --function-name helloLambda \
            --zip-file fileb://lambda_function.zip

          aws lambda wait function-updated --function-name helloLambda
          
          VERSION=$(aws lambda publish-version --function-name helloLambda --query Version --output text)

          aws lambda update-alias \
            --function-name helloLambda \
            --name dev \
            --function-version $VERSION || \
          aws lambda create-alias \
            --function-name helloLambda \
            --name dev \
            --function-version $VERSION

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Health check Lambda alias (direct invoke)
        run: |
          echo "Invoking helloLambda:dev alias..."
          aws lambda invoke \
            --function-name helloLambda:dev \
            --cli-binary-format raw-in-base64-out \
            --payload '{"ping":"test"}' \
            response.json
          
          cat response.json
          if grep -q "error" response.json; then
            echo "❌ Lambda dev alias failed health check"
            exit 1
          else
            echo "✅ Lambda dev alias passed health check"
          fi

      - name: Fetch ColdStartCount metric from CloudWatch
        run: |
          echo "Fetching ColdStartCount metric..."
          mkdir -p reports/cloudwatch
          aws cloudwatch get-metric-statistics \
            --namespace QAFramework \
            --metric-name ColdStartCount \
            --start-time $(date -u -d '10 minutes ago' +%Y-%m-%dT%H:%M:%SZ) \
            --end-time $(date -u +%Y-%m-%dT%H:%M:%SZ) \
            --period 300 \
            --statistics Sum \
            > reports/cloudwatch/coldstart.json

          cat reports/cloudwatch/coldstart.json

      - name: Check ColdStartCount threshold
        run: |
          COUNT=$(jq -r '.Datapoints[0].Sum // 0' reports/cloudwatch/coldstart.json)
          echo "ColdStartCount in last 10 minutes: $COUNT"
          if [ "$COUNT" -gt 2 ]; then
            echo "❌ Too many cold starts detected ($COUNT)!"
            exit 1
          else
            echo "✅ Cold starts within acceptable threshold"
          fi

      - name: Promote to live alias
        if: success()
        run: |
          echo "Promoting version $VERSION to live alias..."
          aws lambda update-alias \
            --function-name helloLambda \
            --name live \
            --function-version $VERSION || \
          aws lambda create-alias \
            --function-name helloLambda \
            --name live \
            --function-version $VERSION

      - name: Install dashboard dependencies
        run: |
          pip install pandas jinja2 plotly

      - name: Generate unified dashboard
        run: |
          python generate_dashboard.py

      - name: Upload test reports   # ✅ moved to the end
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/
