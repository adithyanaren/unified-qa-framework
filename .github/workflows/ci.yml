name: CI - QA Framework

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run PyTest
        run: |
          mkdir -p reports/pytest
          pytest pytest/ --maxfail=1 --disable-warnings -q --junitxml=reports/pytest/results.xml

      - name: Run Robot Framework tests
        run: |
          mkdir -p reports/robot
          robot --output reports/robot/output.xml --report reports/robot/report.html --log reports/robot/log.html robot/api_tests.robot

      - name: Run Locust load tests
        run: |
          mkdir -p reports/locust
          locust -f Locust/locustfile.py \
              --headless \
              -u 10 -r 2 -t 1m \
              --host https://prl0fjqceh.execute-api.us-east-1.amazonaws.com/dev \
              --csv reports/locust/results || true

      - name: Upload test reports
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: reports/

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda to dev alias
        run: |
          zip -r lambda_function.zip lambda_function.py
          aws lambda update-function-code \
            --function-name helloLambda \
            --zip-file fileb://lambda_function.zip

          # ✅ Wait until update is complete
          aws lambda wait function-updated --function-name helloLambda
          
          # Publish new version
          VERSION=$(aws lambda publish-version --function-name helloLambda --query Version --output text)

          # Point "dev" alias to this version
          aws lambda update-alias \
            --function-name helloLambda \
            --name dev \
            --function-version $VERSION || \
          aws lambda create-alias \
            --function-name helloLambda \
            --name dev \
            --function-version $VERSION

          echo "VERSION=$VERSION" >> $GITHUB_ENV

      - name: Health check on /dev
        run: |
          echo "Running health check on /dev alias..."
          set -e
          for i in {1..5}; do
            STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://prl0fjqceh.execute-api.us-east-1.amazonaws.com/dev/hello || true)
            if [ "$STATUS" -eq 200 ]; then
              echo "✅ Health check passed on attempt $i"
              exit 0
            fi
            echo "Health check failed (status $STATUS), retrying..."
            sleep 5
          done
          echo "❌ Health check failed after 5 attempts"
          exit 1

      - name: Promote to live alias
        if: success()
        run: |
          echo "Promoting version $VERSION to live alias..."
          aws lambda update-alias \
            --function-name helloLambda \
            --name live \
            --function-version $VERSION || \
          aws lambda create-alias \
            --function-name helloLambda \
            --name live \
            --function-version $VERSION
